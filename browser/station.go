package browser

import (
	"fmt"
	"strings"
)

const separator = "â”ƒ"

type Station struct {
	// A globally unique identifier for the change of the station information
	Changeuuid string `json:"changeuuid"`

	// A globally unique identifier for the station
	Stationuuid string `json:"stationuuid"`

	Serveruuid interface{} `json:"serveruuid"`

	// 	The name of the station
	Name string `json:"name"`

	// The stream URL provided by the user
	URL string `json:"url"`

	// An automatically "resolved" stream URL. Things resolved are playlists (M3U/PLS/ASX...), HTTP redirects (Code 301/302).
	// This link is especially usefull if you use this API from a platform that is not able to do a resolve on its own (e.g. JavaScript in browser)
	// or you just don't want to invest the time in decoding playlists yourself.
	URLResolved string `json:"url_resolved"`

	// URL to the homepage of the stream, so you can direct the user to a page with more information about the stream.
	Homepage string `json:"homepage"`

	Favicon string `json:"favicon"`

	// Tags of the stream with more information about it
	Tags string `json:"tags"`

	//  	DEPRECATED: use countrycode instead, full name of the country. Currently it is autogenerated from the countrycode.
	Country string `json:"country"`

	// Official countrycodes as in ISO 3166-1 alpha-2
	Countrycode string `json:"countrycode"`

	//"US-NY"
	ISO3166_2 interface{} `json:"iso_3166_2"`

	State string `json:"state"`

	// string, multivalue, split by comma 	Languages that are spoken in this stream.
	Language string `json:"language"`

	// Languages that are spoken in this stream by code ISO 639-2/B
	Languagecodes string `json:"languagecodes"`

	// Number of votes for this station. This number is by server and only ever increases. It will never be reset to 0.
	Votes int64 `json:"votes"`

	Lastchangetime string `json:"lastchangetime"`

	LastchangetimeIso8601 string `json:"lastchangetime_iso8601"`

	Codec string `json:"codec"`

	Bitrate int64 `json:"bitrate"`

	HLS int64 `json:"hls"`

	Lastcheckok int64 `json:"lastcheckok"`

	Lastchecktime string `json:"lastchecktime"`

	LastchecktimeIso8601 string `json:"lastchecktime_iso8601"`

	Lastcheckoktime string `json:"lastcheckoktime"`

	LastcheckoktimeIso8601 string `json:"lastcheckoktime_iso8601"`

	Lastlocalchecktime string `json:"lastlocalchecktime"`

	LastlocalchecktimeIso8601 string `json:"lastlocalchecktime_iso8601"`

	Clicktimestamp string `json:"clicktimestamp"`

	ClicktimestampIso8601 string `json:"clicktimestamp_iso8601"`

	Clickcount int64 `json:"clickcount"`

	Clicktrend int64 `json:"clicktrend"`

	SSLError int64 `json:"ssl_error"`

	GeoLat interface{} `json:"geo_lat"`

	GeoLong interface{} `json:"geo_long"`

	HasExtendedInfo bool `json:"has_extended_info"`
}

func (s Station) Title() string { return s.Name }
func (s Station) Description() string {
	desc := s.Countrycode
	if strings.TrimSpace(s.State) != "" {
		desc += ", " + s.State
	}
	if strings.TrimSpace(s.Language) != "" {
		desc += ", " + s.Language
	}
	if strings.TrimSpace(desc) == "" {
		desc = "-"
	}
	bitrateS := "  - kbps"
	if s.Bitrate != 0 {
		bitrateS = fmt.Sprintf("%3d kbps", s.Bitrate)
	}
	desc = fmt.Sprintf("Votes: %6[2]d, Clicks: %5[6]d %[1]s %[3]s %[1]s %[4]s %[1]s %[5]s",
		separator, s.Votes, bitrateS, desc, s.Tags, s.Clickcount)
	desc = strings.TrimSpace(desc)
	desc = strings.Trim(desc, "|")
	desc = strings.TrimSpace(desc)
	return desc
}
func (s Station) FilterValue() string { return s.Name }
